[project]
name = "darwin"
version = "1.0.0"
description = "Process and visualize measured and simulated data in the project DARWIN."
authors = [{ name = "Benjamin Schmidt", email = "benschmidt@live.de" }]
requires-python = ">=3.12,<=3.14"
readme = "README.md"
license-files = ["uc2-data-standard.pdf", "uc2-datenstandard.pdf"]
dependencies = [
    "cdo>=1.5.6",
    "cdsapi>=0.6.1",
    "cf-xarray>=0.7.4",
    "cftime>=1.6.1",
    "dask>=2022.9.0",
    "descartes>=1.1.0",
    "geopandas>=0.11.1",
    "joblib>=1.1.0",
    "matplotlib>=3.5.3",
    "metpy>=1.3.1",
    "nc-time-axis>=1.4.1",
    "netCDF4>=1.6.0",
    "pandas>=1.4.4",
    "pint-xarray>=0.3",
    "prettyprint>=0.1.5",
    "rasterio>=1.3.2",
    "salem",
    "scikit-image>=0.19.3",
    "tomli>=2.0.1",
    "windrose>=1.7.0",
    "xarray>=2022.6.0",
    "ipython>=8.23.0",
    "statsmodels>=0.14.2",
    "seaborn>=0.13.2",
    "typer>=0.12.3",
    "rioxarray>=0.17.0",
    "pyqt6>=6.8.1",
    "pint>=0.24.4",
]

[dependency-groups]
test = [
    "pytest>=6.0.0",
    "pytest-mock",
]
dev = [
    "icecream>=2.1.3",
    "pandas-stubs>=2.1.1.230928",
]

[tool.uv]
default-groups = [
    "test",
    "dev",
]

[tool.uv.sources]
salem = { path = "../salem" }

[tool.hatch.build.targets.sdist]
include = ["./darwin"]

[tool.hatch.build.targets.wheel]
include = ["./darwin"]

[tool.hatch.build.targets.wheel.sources]
"./darwin" = "darwin"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
python_executable = "python"

[tool.pylint.main]
fail-under = 10
ignore = ["CVS"]
ignore-patterns = ["^\\.#"]
jobs = 1

limit-inference-results = 100
persistent = true

py-version = "3.9"

suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"

attr-naming-style = "snake_case"

bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
class-rgx = "[A-Z][a-z]+"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["ax", "ds", "df", "i", "j", "k", "ex", "Run", "_"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
no-docstring-rgx = "^_"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"

[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["cls"]

[tool.pylint.design]
# Maximum number of arguments for function / method.
max-args = 5
# Maximum number of attributes for a class (see R0902).
max-attributes = 7
# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5
# Maximum number of branch for function / method body.
max-branches = 12
# Maximum number of locals for function / method body.
max-locals = 15
# Maximum number of parents for a class (see R0901).
max-parents = 7
# Maximum number of public methods for a class (see R0904).
max-public-methods = 20
# Maximum number of return / yield for function / method body.
max-returns = 6
# Maximum number of statements in function / method body.
max-statements = 50
# Minimum number of public methods for a class (see R0903).
min-public-methods = 2

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = ["BaseException", "Exception"]

[tool.pylint.format]
# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 100
max-module-lines = 1000

[tool.pylint.logging]
logging-modules = ["logging"]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "TODO", "NOTE"]

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4

[tool.flake8]
max-line-length = 100
max-complexity = 10

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
fixable = ["ALL"]
unfixable = ["F841"]
select = [
  "ALL",
]
ignore = [
  "ERA001",
  "COM812",
  "TD002",
  "TD003",
  "FIX",
  "D107",
  "W292",
	"D413",
]

[tool.ruff.lint.per-file-ignores]
"**/tests/*" = ["S101", "D103"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 40

[tool.isort]
line_length = 80
profile = "black"

[tool.basedpyright]
include = ["darwin"]
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "darwin/experimental",
  "darwin/typestubs",
]
stubPath = "/home/ben/.local/src/python-type-stubs/stubs"
extraPaths = ["../salem"]

reportMissingImports = "error"
reportMissingTypeStubs = true
reportUnusedCallResult = false
reportAny = false
reportUndefinedVariable = true
reportUnusedImport = false

autoImportCompletions = true
typeCheckingMode = "off"
useLibraryCodeForTypes = true
allowUntypedLibraries = true
